# -*- coding: utf-8 -*-
"""Scrap Data from meal DB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hKd9qMHc2R6xoiQds1kECYS9s6djgf0N
"""

import requests
import csv
import json

# Function to fetch data from TheMealDB API
def fetch_meal_data(endpoint, params=None):
    base_url = 'https://www.themealdb.com/api/json/v1/1/'
    url = base_url + endpoint
    response = requests.get(url, params=params)

    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to fetch data: {response.status_code}")
        return None

# Collect meal details for a given category
def fetch_meals_by_category(category):
    meals_data = []
    data = fetch_meal_data('filter.php', {'c': category})

    if data and 'meals' in data:
        for meal in data['meals']:
            meal_id = meal['idMeal']
            meal_details = fetch_meal_data(f'lookup.php?i={meal_id}')

            if meal_details and 'meals' in meal_details:
                meal_info = meal_details['meals'][0]

                # Collect ingredients and measurements
                ingredients = []
                for i in range(1, 21):
                    ingredient = meal_info.get(f'strIngredient{i}')
                    measure = meal_info.get(f'strMeasure{i}')
                    if ingredient and ingredient.strip():
                        ingredients.append(f"{measure} {ingredient}".strip())

                # Store meal details
                meals_data.append({
                    'idMeal': meal_info['idMeal'],
                    'Meal Name': meal_info['strMeal'],
                    'Category': meal_info['strCategory'],
                    'Area': meal_info['strArea'],
                    'Instructions': meal_info['strInstructions'],
                    'Ingredients': json.dumps(ingredients),  # Store as a JSON string
                    'Meal Image': meal_info['strMealThumb'],
                    'YouTube Link': meal_info['strYoutube']
                })

    return meals_data

# Save meal data to a CSV file
def save_to_csv(meals, filename):
    keys = meals[0].keys() if meals else []

    with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=keys)
        writer.writeheader()
        writer.writerows(meals)

    print(f"Data successfully saved to {filename}")

# Main function to fetch and save data
def main():
    category = "Seafood"  # You can change the category
    print(f"Fetching meals for category: {category}")

    meals = fetch_meals_by_category(category)

    if meals:
        save_to_csv(meals, f'{category}_meals.csv')
    else:
        print("No meals found or failed to fetch data.")

if __name__ == "__main__":
    main()